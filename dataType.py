# -------------------------------------Основные типы данных------------------------------------------------------

"""— целые числа:
 Пример: 42, -10 """
a = 3

""" float — вещественные (с плавающей запятой) числа:
# Пример: 3.14, -0.001 """

b = 4.3

""" complex — комплексные числа:
# Пример: 3 + 4j, -2 - 3j """

c = 3 + 4j

# bool — логические значения:
# Пример: True, False

d = True

# str — строки (последовательность символов):
# Пример: "hello", 'world'

e = "hello"

# bytes — байтовые строки:
# Пример: b"hello"

f = b"hello"

# bytearray — изменяемая версия типа bytes:
# Пример: bytearray(b"hello")

g = bytearray(b"hello")

# NoneType — специальный тип для значения None:
# Пример: None

h = None

# -------------------------------------Сложные типы данных------------------------------------------------------

# list — списки (изменяемые последовательности):
# Пример: [1, 2, 3], ['a', 'b', 'c']
# tuple — кортежи (неизменяемые последовательности):
#
# Пример: (1, 2, 3), ('a', 'b', 'c')
# set — множества (неупорядоченные коллекции уникальных элементов):

# Пример: {1, 2, 3}, {"apple", "banana", "cherry"}
# frozenset — неизменяемая версия множества:

# Пример: frozenset([1, 2, 3])
# dict — словари (отображения ключ-значение):

# Пример: {"name": "Alice", "age": 25}, {1: "one", 2: "two"}
# Дополнительные типы данных:
# range — диапазоны чисел:

# Пример: range(5) (соответствует числам 0, 1, 2, 3, 4)
# memoryview — представление объекта памяти:

# Пример: memoryview(b'abc')
# Ellipsis — специальный объект ...:

# Используется в срезах или в других контекстах.



# -------------------------------------Сложные типы данных------------------------------------------------------


Классы (class) — пользовательские типы, которые определяются программистом:

Пример:
python
Копировать код
class MyClass:
    pass
Модули и функции — также являются объектами:

Пример:
Модуль: import math
Функция:
python
Копировать код
def func():
    pass
Типы данных для обработки исключений:
Exception — базовый класс для всех исключений:
Пример: raise Exception("Ошибка")
Модули для работы с типами:
Python также имеет библиотеку typing, которая предоставляет аннотации типов для проверки и улучшения читаемости кода:

Пример: List[int], Optional[str], Union[int, str]
Таким образом, Python обладает богатым набором встроенных типов данных, а также позволяет создавать свои собственные.


